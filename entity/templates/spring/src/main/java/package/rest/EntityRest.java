package <%= packageName %>.rest;

import java.net.URI;
import java.util.List;
import org.slf4j.Logger;
import <%= packageName %>.domain.<%= entityClass %>;
import org.slf4j.LoggerFactory;
import java.net.URISyntaxException;
import org.springframework.http.MediaType;
import <%= packageName %>.repository.<%= entityClass %>Repository;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.beans.factory.annotation.Autowired;

/**
 * Generated by wakeup generator at <%= currentDT %>
 * 'http://wakeup.org.in'
 * REST controller for managing <%= entityClass %>.
 */
@RestController
@RequestMapping(value = "/api/<%= entityLowerCase %>")
public class <%= entityClass %>Rest {

    private final Logger log = LoggerFactory.getLogger(<%= entityClass %>Rest.class);

    @Autowired
    private <%= entityClass %>Repository <%= entityInstance %>Repository;

    /**
     * POST  /<%= entityInstance %> -> Create a new <%= entityInstance %>.
     */
    @RequestMapping(method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE,
                    consumes = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<<%= entityClass %>> create<%= entityClass %>(@RequestBody final <%= entityClass %> <%= entityInstance %>) throws URISyntaxException {
        log.debug("REST request to save <%= entityClass %> : {}", <%= entityInstance %>);
        if (<%= entityInstance %>.getId() != null) return ResponseEntity.badRequest().header("Failure", "A new <%= entityInstance %> cannot already have an ID").body(null);
        <%= entityClass %> result = <%= entityInstance %>Repository.save(<%= entityInstance %>);
        return ResponseEntity.created(new URI("/api/<%= entityInstance %>/" + result.getId())).body(result);
    }

    /**
     * PUT  /<%= entityInstance %> -> Updates an existing <%= entityInstance %>.
     */
    @RequestMapping(method = RequestMethod.PUT, produces = MediaType.APPLICATION_JSON_VALUE,
                    consumes = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<<%= entityClass %>> update<%= entityClass %>(@RequestBody final <%= entityClass %> <%= entityInstance %>) throws URISyntaxException {
        log.debug("REST request to update <%= entityClass %> : {}", <%= entityInstance %>);
        if (<%= entityInstance %>.getId() == null) return ResponseEntity.badRequest().header("Failure", "An update entity must have an ID").body(null);
        <%= entityClass %> result = <%= entityInstance %>Repository.save(<%= entityInstance %>);
        return ResponseEntity.ok().body(result);
    }

    /**
     * GET  /<%= entityInstance %> -> get all the <%= entityInstance %>.
     */
    @RequestMapping(method = RequestMethod.GET)
    public ResponseEntity<List<<%= entityClass %>>> getAll<%= entityClass %>s() throws URISyntaxException {
        log.debug("REST request to get all <%= entityClass %>s : {}");
        final List<<%= entityClass %>> <%= entityInstance %>s = <%= entityInstance %>Repository.findAll();
        return ResponseEntity.ok().body(<%= entityInstance %>s);
    }

    /**
     * GET  /<%= entityInstance %>/:id -> get the "id" <%= entityInstance %>.
     */
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public ResponseEntity<<%= entityClass %>> get<%= entityClass %>(@PathVariable final Long id) {
        log.debug("REST request to get <%= entityClass %> : {}", id);
        return ResponseEntity.ok().body(<%= entityInstance %>Repository.findOne(id));
    }

    /**
     * DELETE  /<%= entityInstance %>/:id -> delete the "id" <%= entityInstance %>.
     */
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public ResponseEntity<Void> delete<%= entityClass %>(@PathVariable final Long id) {
        log.debug("REST request to delete <%= entityClass %> : {}", id);
        if (id == null) return ResponseEntity.badRequest().header("Failure", "Must have an ID").body(null);
        if(<%= entityInstance %>Repository.exists(id)) <%= entityInstance %>Repository.delete(id);
        return ResponseEntity.ok().build();
    }
}
